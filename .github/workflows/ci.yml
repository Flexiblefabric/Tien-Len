name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ "*" ]

jobs:
  test:
    name: tests (py${{ matrix.python-version }} / ubuntu)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    env:
      # Hard-force headless Pygame
      SDL_VIDEODRIVER: dummy
      SDL_AUDIODRIVER: dummy
      PYGAME_HIDE_SUPPORT_PROMPT: "1"
      PYTHONFAULTHANDLER: "1"
      # Make pytest output consistent and informative by default
      PYTEST_ADDOPTS: "-q --maxfail=1 --durations=25 --color=yes --timeout=120 --timeout-method=thread"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install package (editable) + test deps
        run: |
          python -m pip install -e ".[test]"

      - name: Show environment
        run: |
          python -V
          python -c "import sys,pygame; print('pygame', pygame.version.ver); print('SDL_VIDEODRIVER', __import__('os').environ.get('SDL_VIDEODRIVER'))"

      # Step-level guard even if pytest-timeout fails to interrupt
      - name: Run tests under coverage
        run: |
          timeout 20m coverage run -m pytest
        shell: bash

      - name: Generate coverage XML & text reports
        run: |
          coverage xml
          coverage report -m || true

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: |
            ./.coverage
            ./coverage.xml

      - name: Codecov upload
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests,py${{ matrix.python-version }}
          name: tien-len-${{ matrix.python-version }}
          verbose: true
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }} # not needed for public repos

      - name: Append coverage summary to job
        if: always()
        run: |
          echo "### Coverage (py${{ matrix.python-version }})" >> $GITHUB_STEP_SUMMARY
          coverage report -m >> $GITHUB_STEP_SUMMARY || true
